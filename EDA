{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNCmUo2XI0kVb5gLSofOQHn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/st0203/Data-Bootcamp-Final-Personalized-Diet-Recommendation-System/blob/main/Final_Project_Diet_Recommendations.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "qfvgbPhJBwLc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tV2t_n6mBEMs"
      },
      "outputs": [],
      "source": [
        "diet_data = '/content/sample_data/Personalized_Diet_Recommendations.csv'\n",
        "diet = pd.read_csv(diet_data)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "diet.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "id": "-6YjWVXfBXIV",
        "outputId": "4adb09e0-dba6-4dee-900e-5d7916696931"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Patient_ID  Age  Gender  Height_cm  Weight_kg    BMI Chronic_Disease  \\\n",
              "0     P00001   56   Other        163         66  24.84             NaN   \n",
              "1     P00002   69  Female        171        114  38.99             NaN   \n",
              "2     P00003   46  Female        172        119  40.22             NaN   \n",
              "3     P00004   32  Female        197        118  30.41             NaN   \n",
              "4     P00005   60  Female        156        109  44.79    Hypertension   \n",
              "\n",
              "   Blood_Pressure_Systolic  Blood_Pressure_Diastolic  Cholesterol_Level  ...  \\\n",
              "0                      175                        75                219  ...   \n",
              "1                      155                        72                208  ...   \n",
              "2                      137                       101                171  ...   \n",
              "3                      148                        91                258  ...   \n",
              "4                      160                       109                260  ...   \n",
              "\n",
              "   Protein_Intake Carbohydrate_Intake Fat_Intake  Preferred_Cuisine  \\\n",
              "0             105                 179        143            Western   \n",
              "1              69                 315         75      Mediterranean   \n",
              "2             183                 103        148            Western   \n",
              "3             135                 371        120            Western   \n",
              "4             167                 298         48             Indian   \n",
              "\n",
              "   Food_Aversions  Recommended_Calories Recommended_Protein Recommended_Carbs  \\\n",
              "0             NaN                  2150                 108               139   \n",
              "1             NaN                  1527                  74               266   \n",
              "2           Sweet                  2359                 180               145   \n",
              "3             NaN                  2858                 137               378   \n",
              "4           Spicy                  1937                 166               317   \n",
              "\n",
              "  Recommended_Fats  Recommended_Meal_Plan  \n",
              "0              145      High-Protein Diet  \n",
              "1               80          Balanced Diet  \n",
              "2              143      High-Protein Diet  \n",
              "3              135      High-Protein Diet  \n",
              "4               56      High-Protein Diet  \n",
              "\n",
              "[5 rows x 30 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9d3c8824-88b2-4999-915e-6ad370a34738\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Patient_ID</th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Height_cm</th>\n",
              "      <th>Weight_kg</th>\n",
              "      <th>BMI</th>\n",
              "      <th>Chronic_Disease</th>\n",
              "      <th>Blood_Pressure_Systolic</th>\n",
              "      <th>Blood_Pressure_Diastolic</th>\n",
              "      <th>Cholesterol_Level</th>\n",
              "      <th>...</th>\n",
              "      <th>Protein_Intake</th>\n",
              "      <th>Carbohydrate_Intake</th>\n",
              "      <th>Fat_Intake</th>\n",
              "      <th>Preferred_Cuisine</th>\n",
              "      <th>Food_Aversions</th>\n",
              "      <th>Recommended_Calories</th>\n",
              "      <th>Recommended_Protein</th>\n",
              "      <th>Recommended_Carbs</th>\n",
              "      <th>Recommended_Fats</th>\n",
              "      <th>Recommended_Meal_Plan</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>P00001</td>\n",
              "      <td>56</td>\n",
              "      <td>Other</td>\n",
              "      <td>163</td>\n",
              "      <td>66</td>\n",
              "      <td>24.84</td>\n",
              "      <td>NaN</td>\n",
              "      <td>175</td>\n",
              "      <td>75</td>\n",
              "      <td>219</td>\n",
              "      <td>...</td>\n",
              "      <td>105</td>\n",
              "      <td>179</td>\n",
              "      <td>143</td>\n",
              "      <td>Western</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2150</td>\n",
              "      <td>108</td>\n",
              "      <td>139</td>\n",
              "      <td>145</td>\n",
              "      <td>High-Protein Diet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>P00002</td>\n",
              "      <td>69</td>\n",
              "      <td>Female</td>\n",
              "      <td>171</td>\n",
              "      <td>114</td>\n",
              "      <td>38.99</td>\n",
              "      <td>NaN</td>\n",
              "      <td>155</td>\n",
              "      <td>72</td>\n",
              "      <td>208</td>\n",
              "      <td>...</td>\n",
              "      <td>69</td>\n",
              "      <td>315</td>\n",
              "      <td>75</td>\n",
              "      <td>Mediterranean</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1527</td>\n",
              "      <td>74</td>\n",
              "      <td>266</td>\n",
              "      <td>80</td>\n",
              "      <td>Balanced Diet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>P00003</td>\n",
              "      <td>46</td>\n",
              "      <td>Female</td>\n",
              "      <td>172</td>\n",
              "      <td>119</td>\n",
              "      <td>40.22</td>\n",
              "      <td>NaN</td>\n",
              "      <td>137</td>\n",
              "      <td>101</td>\n",
              "      <td>171</td>\n",
              "      <td>...</td>\n",
              "      <td>183</td>\n",
              "      <td>103</td>\n",
              "      <td>148</td>\n",
              "      <td>Western</td>\n",
              "      <td>Sweet</td>\n",
              "      <td>2359</td>\n",
              "      <td>180</td>\n",
              "      <td>145</td>\n",
              "      <td>143</td>\n",
              "      <td>High-Protein Diet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>P00004</td>\n",
              "      <td>32</td>\n",
              "      <td>Female</td>\n",
              "      <td>197</td>\n",
              "      <td>118</td>\n",
              "      <td>30.41</td>\n",
              "      <td>NaN</td>\n",
              "      <td>148</td>\n",
              "      <td>91</td>\n",
              "      <td>258</td>\n",
              "      <td>...</td>\n",
              "      <td>135</td>\n",
              "      <td>371</td>\n",
              "      <td>120</td>\n",
              "      <td>Western</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2858</td>\n",
              "      <td>137</td>\n",
              "      <td>378</td>\n",
              "      <td>135</td>\n",
              "      <td>High-Protein Diet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>P00005</td>\n",
              "      <td>60</td>\n",
              "      <td>Female</td>\n",
              "      <td>156</td>\n",
              "      <td>109</td>\n",
              "      <td>44.79</td>\n",
              "      <td>Hypertension</td>\n",
              "      <td>160</td>\n",
              "      <td>109</td>\n",
              "      <td>260</td>\n",
              "      <td>...</td>\n",
              "      <td>167</td>\n",
              "      <td>298</td>\n",
              "      <td>48</td>\n",
              "      <td>Indian</td>\n",
              "      <td>Spicy</td>\n",
              "      <td>1937</td>\n",
              "      <td>166</td>\n",
              "      <td>317</td>\n",
              "      <td>56</td>\n",
              "      <td>High-Protein Diet</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 30 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d3c8824-88b2-4999-915e-6ad370a34738')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9d3c8824-88b2-4999-915e-6ad370a34738 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9d3c8824-88b2-4999-915e-6ad370a34738');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6d259863-b143-4068-b97a-1e4437161066\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6d259863-b143-4068-b97a-1e4437161066')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6d259863-b143-4068-b97a-1e4437161066 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "diet"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "diet.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MZepJdClBqqd",
        "outputId": "7e5e889f-e99b-4de2-e42f-0fc6b527e02c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5000 entries, 0 to 4999\n",
            "Data columns (total 30 columns):\n",
            " #   Column                    Non-Null Count  Dtype  \n",
            "---  ------                    --------------  -----  \n",
            " 0   Patient_ID                5000 non-null   object \n",
            " 1   Age                       5000 non-null   int64  \n",
            " 2   Gender                    5000 non-null   object \n",
            " 3   Height_cm                 5000 non-null   int64  \n",
            " 4   Weight_kg                 5000 non-null   int64  \n",
            " 5   BMI                       5000 non-null   float64\n",
            " 6   Chronic_Disease           2957 non-null   object \n",
            " 7   Blood_Pressure_Systolic   5000 non-null   int64  \n",
            " 8   Blood_Pressure_Diastolic  5000 non-null   int64  \n",
            " 9   Cholesterol_Level         5000 non-null   int64  \n",
            " 10  Blood_Sugar_Level         5000 non-null   int64  \n",
            " 11  Genetic_Risk_Factor       5000 non-null   object \n",
            " 12  Allergies                 1503 non-null   object \n",
            " 13  Daily_Steps               5000 non-null   int64  \n",
            " 14  Exercise_Frequency        5000 non-null   int64  \n",
            " 15  Sleep_Hours               5000 non-null   float64\n",
            " 16  Alcohol_Consumption       5000 non-null   object \n",
            " 17  Smoking_Habit             5000 non-null   object \n",
            " 18  Dietary_Habits            5000 non-null   object \n",
            " 19  Caloric_Intake            5000 non-null   int64  \n",
            " 20  Protein_Intake            5000 non-null   int64  \n",
            " 21  Carbohydrate_Intake       5000 non-null   int64  \n",
            " 22  Fat_Intake                5000 non-null   int64  \n",
            " 23  Preferred_Cuisine         5000 non-null   object \n",
            " 24  Food_Aversions            3775 non-null   object \n",
            " 25  Recommended_Calories      5000 non-null   int64  \n",
            " 26  Recommended_Protein       5000 non-null   int64  \n",
            " 27  Recommended_Carbs         5000 non-null   int64  \n",
            " 28  Recommended_Fats          5000 non-null   int64  \n",
            " 29  Recommended_Meal_Plan     5000 non-null   object \n",
            "dtypes: float64(2), int64(17), object(11)\n",
            "memory usage: 1.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#fill null values\n",
        "diet['Allergies'].fillna('None', inplace=True)\n",
        "diet['Chronic_Disease'].fillna(\"None\", inplace=True)\n",
        "diet['Food_Aversions'].fillna(\"None\", inplace=True)"
      ],
      "metadata": {
        "id": "Vm874p2YCbcy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#convert float64 to int64\n",
        "diet['BMI'] = diet['BMI'].astype('float64')\n",
        "diet['Sleep_Hours'] = diet['Sleep_Hours'].astype('float64')"
      ],
      "metadata": {
        "id": "JVj0v8kOCQSk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "AQt4ZwOzDn0C"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
